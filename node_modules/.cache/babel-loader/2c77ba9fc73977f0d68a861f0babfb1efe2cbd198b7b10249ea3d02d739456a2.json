{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\47296430\\\\Desktop\\\\Gestordecitas\\\\src\\\\views\\\\Formulario\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport FormularioComponente from '../FormularioComp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Formulario({\n  agregarCita\n}) {\n  _s();\n  const [nombreMascota, setNombreMascota] = useState('');\n  const [nombreDueño, setNombreDueño] = useState('');\n  const [fecha, setFecha] = useState('');\n  const [hora, setHora] = useState('');\n  const [sintomas, setSintomas] = useState('');\n  const [error, setError] = useState('');\n  const handleSubmit = e => {\n    e.preventDefault();\n    // Validar los datos antes de agregar la cita\n    if (nombreMascota.trim() === '' || nombreDueño.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === '') {\n      setError('Todos los campos son obligatorios');\n      return;\n    }\n    // Validar que la fecha no sea anterior a la fecha actual\n    const fechaSeleccionada = new Date(`${fecha}T${hora}`);\n    const fechaActual = new Date();\n    if (fechaSeleccionada < fechaActual) {\n      setError('La fecha seleccionada no puede ser anterior a la fecha actual');\n      return;\n    }\n    // Mostrar mensaje de confirmación\n    const confirmar = window.confirm('¿Estás seguro de agregar esta cita?');\n    if (confirmar) {\n      // Generar un ID único para la cita\n      const id = Math.floor(Math.random() * 10000);\n      agregarCita({\n        id,\n        nombreMascota,\n        nombreDueño,\n        fecha,\n        hora,\n        sintomas\n      });\n      // Limpiar los campos y el mensaje de error después de agregar la cita\n      setNombreMascota('');\n      setNombreDueño('');\n      setFecha('');\n      setHora('');\n      setSintomas('');\n      setError('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(FormularioComponente, {\n    nombreMascota: nombreMascota,\n    nombreDueño: nombreDueño,\n    fecha: fecha,\n    hora: hora,\n    sintomas: sintomas,\n    error: error,\n    setNombreMascota: setNombreMascota,\n    setNombreDueño: setNombreDueño,\n    setFecha: setFecha,\n    setHora: setHora,\n    setSintomas: setSintomas,\n    handleSubmit: handleSubmit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(Formulario, \"qY88y88q8laYP0S6hlp6N3ZRWcg=\");\n_c = Formulario;\nexport default Formulario;\nvar _c;\n$RefreshReg$(_c, \"Formulario\");","map":{"version":3,"names":["React","useState","FormularioComponente","jsxDEV","_jsxDEV","Formulario","agregarCita","_s","nombreMascota","setNombreMascota","nombreDueño","setNombreDueño","fecha","setFecha","hora","setHora","sintomas","setSintomas","error","setError","handleSubmit","e","preventDefault","trim","fechaSeleccionada","Date","fechaActual","confirmar","window","confirm","id","Math","floor","random","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/47296430/Desktop/Gestordecitas/src/views/Formulario/index.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport FormularioComponente from '../FormularioComp';\r\n\r\nfunction Formulario({ agregarCita }) {\r\n  const [nombreMascota, setNombreMascota] = useState('');\r\n  const [nombreDueño, setNombreDueño] = useState('');\r\n  const [fecha, setFecha] = useState('');\r\n  const [hora, setHora] = useState('');\r\n  const [sintomas, setSintomas] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Validar los datos antes de agregar la cita\r\n    if (nombreMascota.trim() === '' || nombreDueño.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === '') {\r\n      setError('Todos los campos son obligatorios');\r\n      return;\r\n    }\r\n    // Validar que la fecha no sea anterior a la fecha actual\r\n    const fechaSeleccionada = new Date(`${fecha}T${hora}`);\r\n    const fechaActual = new Date();\r\n    if (fechaSeleccionada < fechaActual) {\r\n      setError('La fecha seleccionada no puede ser anterior a la fecha actual');\r\n      return;\r\n    }\r\n    // Mostrar mensaje de confirmación\r\n    const confirmar = window.confirm('¿Estás seguro de agregar esta cita?');\r\n    if (confirmar) {\r\n      // Generar un ID único para la cita\r\n      const id = Math.floor(Math.random() * 10000);\r\n      agregarCita({ id, nombreMascota, nombreDueño, fecha, hora, sintomas });\r\n      // Limpiar los campos y el mensaje de error después de agregar la cita\r\n      setNombreMascota('');\r\n      setNombreDueño('');\r\n      setFecha('');\r\n      setHora('');\r\n      setSintomas('');\r\n      setError('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormularioComponente\r\n      nombreMascota={nombreMascota}\r\n      nombreDueño={nombreDueño}\r\n      fecha={fecha}\r\n      hora={hora}\r\n      sintomas={sintomas}\r\n      error={error}\r\n      setNombreMascota={setNombreMascota}\r\n      setNombreDueño={setNombreDueño}\r\n      setFecha={setFecha}\r\n      setHora={setHora}\r\n      setSintomas={setSintomas}\r\n      handleSubmit={handleSubmit}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Formulario;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,oBAAoB,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,SAASC,UAAUA,CAAC;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EACnC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMmB,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB;IACA,IAAId,aAAa,CAACe,IAAI,CAAC,CAAC,KAAK,EAAE,IAAIb,WAAW,CAACa,IAAI,CAAC,CAAC,KAAK,EAAE,IAAIX,KAAK,CAACW,IAAI,CAAC,CAAC,KAAK,EAAE,IAAIT,IAAI,CAACS,IAAI,CAAC,CAAC,KAAK,EAAE,IAAIP,QAAQ,CAACO,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACnIJ,QAAQ,CAAC,mCAAmC,CAAC;MAC7C;IACF;IACA;IACA,MAAMK,iBAAiB,GAAG,IAAIC,IAAI,CAAC,GAAGb,KAAK,IAAIE,IAAI,EAAE,CAAC;IACtD,MAAMY,WAAW,GAAG,IAAID,IAAI,CAAC,CAAC;IAC9B,IAAID,iBAAiB,GAAGE,WAAW,EAAE;MACnCP,QAAQ,CAAC,+DAA+D,CAAC;MACzE;IACF;IACA;IACA,MAAMQ,SAAS,GAAGC,MAAM,CAACC,OAAO,CAAC,qCAAqC,CAAC;IACvE,IAAIF,SAAS,EAAE;MACb;MACA,MAAMG,EAAE,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,KAAK,CAAC;MAC5C3B,WAAW,CAAC;QAAEwB,EAAE;QAAEtB,aAAa;QAAEE,WAAW;QAAEE,KAAK;QAAEE,IAAI;QAAEE;MAAS,CAAC,CAAC;MACtE;MACAP,gBAAgB,CAAC,EAAE,CAAC;MACpBE,cAAc,CAAC,EAAE,CAAC;MAClBE,QAAQ,CAAC,EAAE,CAAC;MACZE,OAAO,CAAC,EAAE,CAAC;MACXE,WAAW,CAAC,EAAE,CAAC;MACfE,QAAQ,CAAC,EAAE,CAAC;IACd;EACF,CAAC;EAED,oBACEf,OAAA,CAACF,oBAAoB;IACnBM,aAAa,EAAEA,aAAc;IAC7BE,WAAW,EAAEA,WAAY;IACzBE,KAAK,EAAEA,KAAM;IACbE,IAAI,EAAEA,IAAK;IACXE,QAAQ,EAAEA,QAAS;IACnBE,KAAK,EAAEA,KAAM;IACbT,gBAAgB,EAAEA,gBAAiB;IACnCE,cAAc,EAAEA,cAAe;IAC/BE,QAAQ,EAAEA,QAAS;IACnBE,OAAO,EAAEA,OAAQ;IACjBE,WAAW,EAAEA,WAAY;IACzBG,YAAY,EAAEA;EAAa;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5B,CAAC;AAEN;AAAC9B,EAAA,CAtDQF,UAAU;AAAAiC,EAAA,GAAVjC,UAAU;AAwDnB,eAAeA,UAAU;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}